[{"/mnt/d/Projects/VifabTypeService/configurator-ui-v2/src/App.js":"1","/mnt/d/Projects/VifabTypeService/configurator-ui-v2/src/reportWebVitals.js":"2","/mnt/d/Projects/VifabTypeService/configurator-ui-v2/src/index.js":"3"},{"size":19456,"mtime":1614143592179,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1610327653923,"results":"6","hashOfConfig":"5"},{"size":632,"mtime":1610516003199,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"2l87i1",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/d/Projects/VifabTypeService/configurator-ui-v2/src/App.js",["15","16","17","18","19","20","21","22","23"],"import React, { useState, useEffect } from 'react';\nimport { Box, Heading } from 'grommet';\nimport { Formik, Form, Field } from 'formik'\nimport { TextField } from 'material-ui-formik-components/TextField'\nimport { Select } from 'material-ui-formik-components/Select'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Add } from 'grommet-icons';\nimport DataTable from 'react-data-table-component';\nimport DataTableExtensions from 'react-data-table-component-extensions';\nimport { format } from 'footinch';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport Input from '@material-ui/core/Input';\nimport 'react-data-table-component-extensions/dist/index.css';\n\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '45ch',\n  },\n}));\nconst formatter = format.FT.to.FT.IN.FRAC(32);\n\nfunction App() {\n  const [systemStairList, setSystemStairList] = useState([{ stairData: {}, flights: [{ flightName: \"\", elevation: 0, landingWidth: 0 }], stairNumber: 0 }]);\n  const [activeStairId, setActiveStairId] = useState(0);\n\n  const activeStair = getActiveStair();\n  function getActiveStair() {\n    if (systemStairList.some(e => e.stairNumber === activeStairId)) {\n      return systemStairList.find(obj => {\n        return obj.stairNumber === activeStairId\n      })\n\n    } else {\n      setActiveStairId(systemStairList[0].stairNumber);\n      return systemStairList[0];\n    }\n  }\n\n\n  const flightColumns = [\n    {\n      name: 'Flight Number',\n      selector: 'flightNumber'\n    },\n    {\n      name: 'Flight Name',\n      selector: 'flightName',\n      cell: row => <Input defaultValue={row.flightName} onBlur={handleFlightUpdate({ field: \"flightName\", row })} />\n    },\n    {\n      name: 'Elevation',\n      selector: 'elevation',\n      cell: row => <Input type='number' defaultValue={parseFloat(row.elevation)} onBlur={handleFlightUpdate({ field: \"elevation\", row })} />\n    },\n    {\n      name: 'Landing Width',\n      selector: 'landingWidth',\n      cell: row => <Input type='number' defaultValue={parseFloat(row.landingWidth)} onBlur={handleFlightUpdate({ field: \"landingWidth\", row })} />\n    },\n    {\n      name: 'Is Bridge',\n      selector: 'isBridge',\n\n      cell: row =>\n        <Field\n          options={[{ value: false, label: 'False' }, { value: true, label: 'True' }]}\n          component={Select}\n          defaultValue={row.isBridge}\n          onChange={handleFlightUpdate({ field: \"isBridge\", row })} />\n    },\n    {\n      name: 'Is Ddl',\n      selector: 'isDdl',\n\n      cell: row =>\n        <Field\n          options={[{ value: false, label: 'False' }, { value: true, label: 'True' }]}\n          component={Select}\n          defaultValue={row.isDdl}\n          onChange={handleFlightUpdate({ field: \"isDdl\", row })} />\n    },\n    {\n      name: 'Is Top Dog',\n      selector: 'isTopDog',\n      cell: row =>\n        <Field\n          options={[{ value: false, label: 'False' }, { value: true, label: 'True' }]}\n          component={Select}\n          defaultValue={row.isTopDogLeg}\n          onChange={handleFlightUpdate({ field: \"isTopDogLeg\", row })} />\n    },\n    {\n      name: 'Has Safety Gate',\n      selector: 'hasSafetyGate',\n      cell: row =>\n        <Field\n          options={[{ value: false, label: 'False' }, { value: true, label: 'True' }]}\n          component={Select}\n          defaultValue={row.hasSafetyGate}\n          onChange={handleFlightUpdate({ field: \"hasSafetyGate\", row })} />\n    },\n    {\n      name: 'Top Dog Leg Length',\n      selector: 'topDogLegLength',\n      cell: row => <Input type='number' defaultValue={parseFloat(row.topDogLegLength)} onBlur={handleFlightUpdate({ field: \"topDogLegLength\", row })} />\n    },\n    {\n      name: 'Risers',\n      selector: 'risers',\n      cell: row => <Input defaultValue={row.risers} type='number' onBlur={handleFlightUpdate({ field: \"risers\", row })} />\n    },\n    {\n      name: 'Stringer Thickness',\n      selector: 'stringerThickness',\n      cell: row => <Input defaultValue={row.stringerThickness} type='number' onBlur={handleFlightUpdate({ field: \"stringerThickness\", row })} />\n    },\n    {\n      name: 'Stair Rise',\n      selector: 'stairRise',\n      //cell: row => <Input defaultValue={row.landingWidth} onBlur={handleFlightNameChange({ field: \"landingWidth\", row })} />\n    },\n    {\n      name: 'Stair Run',\n      selector: 'stairRun',\n      //cell: row => <Input defaultValue={row.landingWidth} onBlur={handleFlightNameChange({ field: \"landingWidth\", row })} />\n    },\n\n    {\n      name: 'Riser Height',\n      selector: 'riserHeight',\n      //cell: row => <Input defaultValue={row.landingWidth} onBlur={handleFlightNameChange({ field: \"landingWidth\", row })} />\n    },\n    {\n      name: 'Calculated Length',\n      selector: 'calculatedLength'\n    },\n    {\n      name: 'Delete',\n      cell: row => <button type=\"button\" onClick={() => handleFlightDelete(row)}>Delete Flight</button>\n    }\n  ];\n\n\n  const flightColumnsExport = [\n    {\n      name: 'Flight Number',\n      selector: 'flightNumber'\n    },\n    {\n      name: 'Flight Name',\n      selector: 'flightName'\n    },\n    {\n      name: 'Elevation',\n      selector: 'elevation'\n    },\n    {\n      name: 'Landing Width',\n      selector: 'landingWidth'\n    },\n    {\n      name: 'Is Ddl',\n      selector: 'isDdl'\n    },\n    {\n      name: 'Is Top Dog',\n      selector: 'isTopDog'\n    },\n    {\n      name: 'Top Dog Leg Length',\n      selector: 'topDogLegLength'\n    },\n    {\n      name: 'Risers',\n      selector: 'risers'\n    },\n    {\n    name: 'Stringer Thickness',\n    selector: 'stringerThickness'\n    },\n    {\n      name: 'Stair Rise',\n      selector: 'stairRise',\n      //cell: row => <Input defaultValue={row.landingWidth} onBlur={handleFlightNameChange({ field: \"landingWidth\", row })} />\n    },\n    {\n      name: 'Stair Run',\n      selector: 'stairRun',\n      //cell: row => <Input defaultValue={row.landingWidth} onBlur={handleFlightNameChange({ field: \"landingWidth\", row })} />\n    },\n\n    {\n      name: 'Riser Height',\n      selector: 'riserHeight',\n      //cell: row => <Input defaultValue={row.landingWidth} onBlur={handleFlightNameChange({ field: \"landingWidth\", row })} />\n    },\n    {\n      name: 'Calculated Length',\n      selector: 'calculatedLength'\n    }\n  ];\n  const conditionalRowStyles = [\n\n    {\n      when: row => row.calculatedLength > activeStair.stairData.stairwellLength,\n      style: {\n        backgroundColor: 'rgba(242, 38, 19, 0.9)',\n      }\n    },\n    {\n      when: row => row.calculatedLength < activeStair.stairData.stairwellLength,\n      style: {\n        backgroundColor: 'rgba(247, 202, 24, .9)',\n      }\n    },\n    {\n      when: row => row.calculatedLength == activeStair.stairData.stairwellLength,\n      style: {\n        backgroundColor: 'rgba(0, 177, 106, 0.9)',\n      }\n    },\n  ];\n\n  const updateStair = (updatedStair) => {\n\n    const putMethod = {\n      method: 'PUT', // Method itself\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8' // Indicates the content \n      },\n      body: JSON.stringify(updatedStair) // We send data in JSON format\n    }\n\n    fetch(`https://localhost:44312/stairConfigurator/`, putMethod).catch(err => console.log(err)) // Do something with the error\n\n    const stairId = updatedStair.stairNumber;\n    var stairListCopy = cloneDeep(systemStairList);\n    var stairIndex = stairListCopy.findIndex(el => el.stairNumber === stairId);\n    stairListCopy[stairIndex] = updatedStair;\n    setSystemStairList(stairListCopy)\n  }\n\n  const addStair = (newStair) => {\n    const stairId = newStair.stairNumber;\n    var stairListCopy = cloneDeep(systemStairList);\n    stairListCopy.push(newStair);\n    setSystemStairList(stairListCopy);\n    setActiveStairId(stairId);\n  }\n\n  useEffect(() => {\n    updateSystemStairList()\n  }, [])\n\n  const updateSystemStairList = () => {\n    fetch(\"https://localhost:44312/stairConfigurator\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result.length > 0) {\n            setSystemStairList(result);\n            //setActiveStairId(result[0])\n          }\n\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log(error);\n        }\n      )\n  }\n\n\n  const AppBox = (props) => (\n    <Box\n      tag='header'\n      margin='medium'\n      border={true}\n      wrap={true}\n      direction='row'\n      align='center'\n      background='light-2'\n      pad={{ vertical: 'small', horizontal: 'medium' }}\n      elevation='medium'\n      {...props}\n    />\n  );\n\n  const classes = useStyles();\n\n  function handleStairSelect(e) {\n    setActiveStairId(e.target.value)\n  }\n\n  function handleFlightDelete(rowFieldData) {\n    console.log('out: ', JSON.stringify(rowFieldData))\n    var stairListCopy = cloneDeep(systemStairList);\n    const stairIndex = stairListCopy.findIndex(el => el.stairNumber === activeStairId);\n    const flightIndex = stairListCopy[stairIndex].flights.findIndex(el => el.flightName === rowFieldData.flightName);\n    stairListCopy[stairIndex].flights.splice(flightIndex, 1);\n\n    setSystemStairList(stairListCopy);\n  }\n\n  const handleFlightUpdate = rowFieldData => (event) => {\n\n    var stairListCopy = cloneDeep(systemStairList);\n    //find index of current stair\n    const stairIndex = stairListCopy.findIndex(el => el.stairNumber === activeStairId);\n\n    //sort by elevation for our calcs\n    stairListCopy[stairIndex].flights.sort((a, b) => a.elevation - b.elevation);\n    //find index of flight\n    const flightIndex = stairListCopy[stairIndex].flights.findIndex(el => el.flightName === rowFieldData.row.flightName);\n    //TODO:  This has frown.  Consider a switch statement\n    var fieldValue = (rowFieldData.field == \"isTopDogLeg\" || rowFieldData.field == \"isDdl\" || rowFieldData.field == \"flightName\"|| rowFieldData.field == \"isBridge\"|| rowFieldData.field == \"hasSafetyGate\") ? event.target.value : parseFloat(event.target.value);\n    console.log('field value is ', fieldValue)\n    stairListCopy[stairIndex].flights[flightIndex][rowFieldData.field] = fieldValue;\n\n    //var currentFlightData = stairListCopy[stairIndex].flights[flightIndex];\n\n    for (var i = 0; i < stairListCopy[stairIndex].flights.length; i++) {\n      var flight = stairListCopy[stairIndex].flights[i];\n\n      flight.stairRise = (i == 0) ?\n        (flight.elevation - stairListCopy[stairIndex].stairData.baseElevation)\n        : (flight.elevation - stairListCopy[stairIndex].flights[i - 1].elevation);\n\n      flight.flightNumber = i + 1;\n      //flight.risers = rowFieldData.field == \"risers\" ? fieldValue : (Math.ceil(flight.stairRise / 7));\n      flight.riserHeight = flight.stairRise / flight.risers;\n      flight.stairRun = (flight.risers - 1) * 11;\n      var previousLandingWidth = 0;\n      if (i !== 0) {\n        previousLandingWidth = stairListCopy[stairIndex].flights[i - 1].landingWidth;\n      } else {\n        previousLandingWidth = stairListCopy[stairIndex].stairData.baseLandingWidthToWall;\n      }\n\n      flight.calculatedLength = flight.stairRun\n        + (flight.isDdl ? 11 : 0) + (flight.isTopDogLeg ? flight.topDogLegLength : 0)\n        + flight.landingWidth\n        + previousLandingWidth;\n\n\n    }\n\n    //calculate rise.\n    //check if this is the first flight.  If it is use stair base elevation.  If not get previous flight elevation for delat\n\n    //loop through flights and recalc everything from bottom up\n\n\n\n    setSystemStairList(stairListCopy);\n  }\n\n  // function handleFlightNameChange(e, row) {\n  //   console.log('out: ', JSON.stringify(row))\n  // }\n\n  function handleCreateNewStair() {\n    const defaultStairObject = { stairData: {}, flights: [] }\n\n    const postMethod = {\n      method: 'POST', // Method itself\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8' // Indicates the content \n      },\n      body: JSON.stringify(defaultStairObject) // We send data in JSON format\n    }\n\n    fetch(`https://localhost:44312/stairConfigurator/`, postMethod)\n      .then(res => res.json())\n      .then((result) => { addStair(result) })\n      .catch(err => console.log(err)) // Do something with the error\n  }\n\n  function handleDeleteStair() {\n    const deleteMethod = {\n      method: 'DELETE', // Method itself\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8' // Indicates the content \n      },\n    }\n\n    fetch(`https://localhost:44312/stairConfigurator/${activeStairId}`, deleteMethod)\n      .then(res => res.json())\n      .then((result) => { addStair(result) })\n      .catch(err => console.log(err)) // Do something with the error\n  }\n\n  return (\n    <AppBox>\n\n      <Box fill=\"vertical\" >\n        <Heading level=\"2\" size=\"medium\" >Overall Stair Geometry and Type</Heading>\n        <Box fill=\"horizontal\">\n\n          <Formik\n            initialValues={activeStair}\n          >\n            <Form>\n              <Field\n                required\n                fullWidth={false}\n                style={{ minWidth: 120 }}\n                name=\"stairNumber\"\n                label=\"Select Stair\"\n                options={systemStairList.map(a => ({ value: a.stairNumber, label: `${a.stairNumber}-${a.stairData.stairName ? a.stairData.stairName : ''}` }))}\n                component={Select}\n                onChange={handleStairSelect}\n              />\n              <div>\n                <button onClick={handleCreateNewStair}>New Stair</button>\n                <button type=\"button\" onClick={handleDeleteStair}>Delete Stair</button>\n              </div>\n\n            </Form>\n          </Formik>\n\n        </Box>\n        <Formik\n          initialValues={activeStair.stairData}\n          onSubmit={values => {\n            updateStair(Object.assign({}, activeStair, { stairData: values }))\n          }}\n        >\n          {formik => (\n\n            <Form >\n\n\n              <Field\n                margin=\"dense\"\n                name=\"stairName\"\n                label=\"Stair Name\"\n                component={TextField}\n                className={classes.textField}\n              />\n              <Field\n                margib=\"dense\"\n                name=\"orientation\"\n                label=\"Orientation\"\n                options={[{ value: 'CLOCKWISE', label: 'Clockwise' }, { value: 'COUNTERCLOCKWISE', label: 'Counterclockwise' }]}\n                fullWidth={false}\n                style={{ minWidth: 200 }}\n                component={Select}\n              />\n              <Box direction=\"row\">\n                <Field\n                  type='number'\n                  margin=\"dense\"\n                  name=\"baseLandingWidthToWall\"\n                  label=\"Base Landing Width To Wall\"\n                  component={TextField}\n                  className={classes.textField}\n                />\n                <Field\n                  type='number'\n                  margin=\"dense\"\n                  name=\"baseElevation\"\n                  label=\"Base Elevation\"\n                  component={TextField}\n                  className={classes.textField}\n                />\n                <Field\n                  type='number'\n                  margin=\"dense\"\n                  name=\"stairEdgeClearance\"\n                  label=\"Stair Edge Clearance\"\n                  component={TextField}\n                  className={classes.textField}\n                />\n              </Box>\n\n\n\n              <Box direction=\"row\">\n                <Field\n                  type='number'\n                  name=\"stairwellWidth\"\n                  fullWidth={false}\n                  margin=\"dense\"\n                  label=\"Stairwell Width\"\n                  component={TextField}\n                  className={classes.textField}\n                />\n                <Field\n                  type='number'\n                  name=\"stairwellLength\"\n                  margin=\"dense\"\n                  fullWidth={false}\n                  label=\"Stairwell Length\"\n                  component={TextField}\n                  className={classes.textField}\n                />\n                <Field\n                  type='number'\n                  name=\"stairWidth\"\n                  margin=\"dense\"\n                  fullWidth={false}\n                  label=\"Stair Width\"\n                  component={TextField}\n                  className={classes.textField}\n                />\n              </Box>\n\n              <button type=\"submit\" disabled={!formik.dirty}>\n                Update\n              </button>\n            </Form>\n          )}\n        </Formik>\n\n      </Box>\n      <Box fill=\"horizontal\" margin={{ \"top\": \"20px\" }}>\n        <Heading level=\"2\" size=\"medium\" >Flights</Heading>\n        <Formik\n          initialValues={{\n            flightName: '',\n            elevation: 0,\n          }}\n          onSubmit={values => {\n            updateStair(Object.assign({}, activeStair, { flights: [...activeStair.flights, values] }));\n          }}\n        >\n          {formik => (\n\n            <Form >\n              <Field\n                name=\"flightName\"\n                label=\"Flight Name\"\n                component={TextField}\n                margin=\"dense\" fullWidth={false}\n                className={classes.textField} />\n              <Field\n                type='number'\n                name=\"elevation\"\n                label=\"Top Elevation\"\n                component={TextField}\n                margin=\"dense\" fullWidth={false}\n                className={classes.textField} />\n              <Field\n                type='number'\n                name=\"landingWidth\"\n                label=\"Landing Width\"\n                component={TextField}\n                margin=\"dense\" fullWidth={false}\n                className={classes.textField} />\n              <Field\n                type='number'\n                name=\"risers\"\n                label=\"Risers\"\n                component={TextField}\n                margin=\"dense\" fullWidth={false}\n                className={classes.textField} />\n\n              <button type=\"submit\" disabled={!formik.dirty}>\n                <Add />\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n      <Formik>\n        <Form>\n          <DataTable\n            title=\"Flights\"\n            striped={true}\n            columns={flightColumns}\n            data={activeStair.flights.sort((a, b) => b.elevation - a.elevation)}\n            conditionalRowStyles={conditionalRowStyles}\n          //expandableRows\n          //expandableRowsComponent={<ParameterForm partData={props.values.data.partProperties} drivingLayoutPartTypeId={activeDrivingLayoutPartTypeId} assemblyLocation=\"root\" />}\n          />\n          <button onClick={() => updateStair(activeStair)}>\n            Update\n              </button>\n        </Form>\n      </Formik>\n{/* TODO: Add to tab */}\n      <DataTableExtensions\n        columns={flightColumnsExport}\n        data={activeStair.flights.sort((a, b) => b.elevation - a.elevation)}>\n        <DataTable\n          title=\"Flights\"\n          striped={true}\n\n          //conditionalRowStyles={conditionalRowStyles}\n        //expandableRows\n        //expandableRowsComponent={<ParameterForm partData={props.values.data.partProperties} drivingLayoutPartTypeId={activeDrivingLayoutPartTypeId} assemblyLocation=\"root\" />}\n        />\n      </DataTableExtensions>\n    </AppBox>\n\n\n  );\n}\n\nexport default App;\n","/mnt/d/Projects/VifabTypeService/configurator-ui-v2/src/reportWebVitals.js",[],"/mnt/d/Projects/VifabTypeService/configurator-ui-v2/src/index.js",[],{"ruleId":"24","severity":1,"message":"25","line":12,"column":8,"nodeType":"26","messageId":"27","endLine":12,"endColumn":11},{"ruleId":"24","severity":1,"message":"28","line":24,"column":7,"nodeType":"26","messageId":"27","endLine":24,"endColumn":16},{"ruleId":"29","severity":1,"message":"30","line":221,"column":41,"nodeType":"31","messageId":"32","endLine":221,"endColumn":43},{"ruleId":"29","severity":1,"message":"30","line":322,"column":42,"nodeType":"31","messageId":"32","endLine":322,"endColumn":44},{"ruleId":"29","severity":1,"message":"30","line":322,"column":81,"nodeType":"31","messageId":"32","endLine":322,"endColumn":83},{"ruleId":"29","severity":1,"message":"30","line":322,"column":114,"nodeType":"31","messageId":"32","endLine":322,"endColumn":116},{"ruleId":"29","severity":1,"message":"30","line":322,"column":151,"nodeType":"31","messageId":"32","endLine":322,"endColumn":153},{"ruleId":"29","severity":1,"message":"30","line":322,"column":186,"nodeType":"31","messageId":"32","endLine":322,"endColumn":188},{"ruleId":"29","severity":1,"message":"30","line":331,"column":29,"nodeType":"31","messageId":"32","endLine":331,"endColumn":31},"no-unused-vars","'get' is defined but never used.","Identifier","unusedVar","'formatter' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]